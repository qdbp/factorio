# vim: ft=gmpl
# 
# Finding the optimal belt feed for a Factorio line
# Evgeny Naumov, 2019

set I := 0..7;
/* belts */

set N := 0..3;
/* halves of I */

set J := {"y", "r", "b"};
/* belt types */

set K := {"R", "L"};
/* belt sides */

set L;
/* side types */

param need{l in L};
/* required weights */

param cost{j in J};
/* belt type costs */

param flow{j in J};
/* belt type capacities */

var z{i in I, j in J, k in K, l in L}, binary;
/* z[i, j, k, l] == 1 <=>
    the belt
    in position                   i
    of type                       j
    on side                       k
    is transporting goods of type l
*/

minimize cost_overflow:
      sum{i in I, j in J, k in K, l in L} cost[j] * z[i,j,k,l]
    + sum{i in I, j in J, k in K, l in L} z[i,j,k,l] * flow[j];
/* belt overflow and construction costs */

s.t. satisfaction{l in L}:
    sum{
        i in I,
        j in J,
        k in K
    } (z[i,j,k,l] * flow[j]) >= need[l];
/* ENOUGH ITEMS */

/* s.t. homotrans{
        i in I,
        j in J,
        k in K
    }:
    sum{
        l in L
    }
    z[i,j,k,l] <= 1;
/* HOMOGENEOUS TRANSPORT */

s.t. homosideshomotrans{
        i in I,
        k in K
    }:
    sum{
        j in J,
        l in L
    } z[i,j,k,l] <= 1;
/* SIDES HAVE ONE TYPE -> HOMOGENEOUS TRANSPORT */

s.t. matchedsides{
        i in I,
        j in J
    }:
    sum {
        l in L
    }
    (z[i,j,"R",l] - z[i,j,"L",l]) = 0;
/* MATCHED SIDES  */

s.t. exclbraid{
        n in N,
        j in J
    }:
    sum{
        l in L
    } (z[2 * n,j,"R",l] + z[2 * n + 1,j,"R",l]) <= 1;
/* EXCLUSIVE BRAIDING */

s.t. twobeltsperline{
        n in N
    }:
    sum{
        j in J,
        l in L
    } (z[2 * n,j,"R",l] + z[2 * n + 1,j,"R",l]) <= 2;
/* TWO BELTS PER LINE */


data;

param flow :=
    y 1
    r 2
    b 3;

param cost :=
    y 1
    r 1
    b 1;

set L := nothing iron copper plastic;

/* we need the "empty item" to handle some belt constraints */
param need :=
    nothing 0
    iron 3
    copper 2
    plastic 1;
